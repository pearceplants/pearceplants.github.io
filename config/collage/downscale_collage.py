#!/usr/bin/env python3
"""
PNG optimizer: scale, resize, or compress images for web performance.

Options (keep same names as your previous script):
- SCALE_PERCENT: % downscaling (100 = no scale)
- MAX_WIDTH, MAX_HEIGHT: clamp dimensions (images shrink-to-fit if larger)
- USE_8BIT: True/False, save as 8-bit palette PNG

Additionally:
- GENERATE_MANIFEST: write config/precache-manifest.js after processing
- EXTRA_ASSETS: extra files to include in the manifest
"""

import os
from pathlib import Path
from PIL import Image

# ======================
# CONFIG (same keys as before)
# ======================
SCALE_PERCENT = 100      # e.g., 50 = reduce to 50%
MAX_WIDTH     = 350      # px (0 = no limit)
MAX_HEIGHT    = 350      # px (0 = no limit)
USE_8BIT      = False    # True = save as 8-bit palette PNG

SCRIPT_DIR = Path(__file__).resolve().parent
# default input/output like before
INPUT_DIR  = SCRIPT_DIR.parent.parent / "images" / "collage"
OUTPUT_DIR = SCRIPT_DIR.parent.parent / "images" / "collage"

# ================
# Manifest options
# ================
GENERATE_MANIFEST = True
MANIFEST_PATH = SCRIPT_DIR.parent.parent / "config" / "precache-manifest.js"
EXTRA_ASSETS = [
    "config/collage/collage_data.js",
    "config/nav.config.js",
    "scripts/ribbon.js",
    "scripts/bottomRibbon.js",
    "scripts/index.js",  # optional page content filler
]

def _fit_scale_for_max_dims(w, h, max_w, max_h):
    """Return uniform scale <= 1.0 so that (w*scale)<=max_w and (h*scale)<=max_h (ignores zeros)."""
    scale = 1.0
    if max_w and w > max_w:
        scale = min(scale, max_w / w)
    if max_h and h > max_h:
        scale = min(scale, max_h / h)
    return scale

def process_image(in_path: Path, out_path: Path):
    try:
        with Image.open(in_path) as img:
            img = img.convert("RGBA")  # keep alpha for cutouts

            # 1) Apply SCALE_PERCENT
            scale1 = max(1, SCALE_PERCENT) / 100.0
            new_w = max(1, int(img.width  * scale1))
            new_h = max(1, int(img.height * scale1))

            # 2) Apply max width/height (as fit-inside)
            fit_scale = _fit_scale_for_max_dims(new_w, new_h,
                                                MAX_WIDTH if MAX_WIDTH > 0 else None,
                                                MAX_HEIGHT if MAX_HEIGHT > 0 else None)
            if fit_scale < 1.0:
                new_w = max(1, int(new_w * fit_scale))
                new_h = max(1, int(new_h * fit_scale))

            # Resize if changed
            if (new_w, new_h) != img.size:
                img = img.resize((new_w, new_h), Image.LANCZOS)

            # Optional 8-bit palette
            if USE_8BIT:
                img = img.convert("P", palette=Image.ADAPTIVE)

            out_path.parent.mkdir(parents=True, exist_ok=True)
            img.save(out_path, format="PNG", optimize=True)
            print(f"Saved: {out_path} ({new_w}x{new_h}, 8bit={USE_8BIT})")

    except Exception as e:
        print(f"Error with {in_path}: {e}")

def _rel(site_root: Path, p: Path) -> str:
    return str(p.resolve().relative_to(site_root)).replace("\\", "/")

def write_precache_manifest(site_root: Path, output_dir: Path, manifest_path: Path, extras):
    assets = []

    if output_dir.exists():
        for p in sorted(output_dir.rglob("*.png")):
            assets.append(_rel(site_root, p))

    for rel in extras:
        p = site_root / rel
        if p.exists():
            assets.append(rel.replace("\\", "/"))

    text = (
        "// Auto-generated by optimize_pngs.py\n"
        "window.PRECACHE_ASSETS = [\n  "
        + ",\n  ".join(f"\"{a}\"" for a in assets)
        + "\n];\n"
    )
    manifest_path.parent.mkdir(parents=True, exist_ok=True)
    manifest_path.write_text(text, encoding="utf-8")
    print(f"Wrote manifest with {len(assets)} assets -> {manifest_path}")

def main():
    site_root = SCRIPT_DIR.parent.parent  # Website root

    # Process PNGs
    for root, _, files in os.walk(INPUT_DIR):
        rel_root = Path(root).relative_to(INPUT_DIR)
        out_root = OUTPUT_DIR / rel_root
        for f in files:
            if Path(f).suffix.lower() == ".png":
                in_path = Path(root) / f
                out_path = out_root / f
                process_image(in_path, out_path)

    # Manifest
    if GENERATE_MANIFEST:
        write_precache_manifest(site_root, OUTPUT_DIR, MANIFEST_PATH, EXTRA_ASSETS)

if __name__ == "__main__":
    main()
